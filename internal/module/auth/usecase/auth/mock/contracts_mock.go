// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/module/auth/usecase/auth/contracts/contracts.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/Fi44er/sdmed/internal/module/auth/entity"
	service "github.com/Fi44er/sdmed/internal/module/notification/service"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserUsecase is a mock of IUserUsecase interface.
type MockIUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUsecaseMockRecorder
}

// MockIUserUsecaseMockRecorder is the mock recorder for MockIUserUsecase.
type MockIUserUsecaseMockRecorder struct {
	mock *MockIUserUsecase
}

// NewMockIUserUsecase creates a new mock instance.
func NewMockIUserUsecase(ctrl *gomock.Controller) *MockIUserUsecase {
	mock := &MockIUserUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUsecase) EXPECT() *MockIUserUsecaseMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockIUserUsecase) ComparePassword(user *entity.User, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", user, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockIUserUsecaseMockRecorder) ComparePassword(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockIUserUsecase)(nil).ComparePassword), user, password)
}

// Create mocks base method.
func (m *MockIUserUsecase) Create(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserUsecaseMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserUsecase)(nil).Create), ctx, user)
}

// GetByEmail mocks base method.
func (m *MockIUserUsecase) GetByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIUserUsecaseMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIUserUsecase)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockIUserUsecase) GetByID(ctx context.Context, id string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserUsecaseMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUserUsecase)(nil).GetByID), ctx, id)
}

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockICache) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockICacheMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockICache)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockICache) Get(ctx context.Context, key string, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockICacheMockRecorder) Get(ctx, key, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICache)(nil).Get), ctx, key, dest)
}

// Set mocks base method.
func (m *MockICache) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockICacheMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICache)(nil).Set), ctx, key, value, expiration)
}

// MockINotificationService is a mock of INotificationService interface.
type MockINotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationServiceMockRecorder
}

// MockINotificationServiceMockRecorder is the mock recorder for MockINotificationService.
type MockINotificationServiceMockRecorder struct {
	mock *MockINotificationService
}

// NewMockINotificationService creates a new mock instance.
func NewMockINotificationService(ctrl *gomock.Controller) *MockINotificationService {
	mock := &MockINotificationService{ctrl: ctrl}
	mock.recorder = &MockINotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationService) EXPECT() *MockINotificationServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockINotificationService) Send(msg *service.Message, selectedNotifiers ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range selectedNotifiers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Send", varargs...)
}

// Send indicates an expected call of Send.
func (mr *MockINotificationServiceMockRecorder) Send(msg interface{}, selectedNotifiers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, selectedNotifiers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockINotificationService)(nil).Send), varargs...)
}

// MockISessionRepository is a mock of ISessionRepository interface.
type MockISessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepositoryMockRecorder
}

// MockISessionRepositoryMockRecorder is the mock recorder for MockISessionRepository.
type MockISessionRepositoryMockRecorder struct {
	mock *MockISessionRepository
}

// NewMockISessionRepository creates a new mock instance.
func NewMockISessionRepository(ctrl *gomock.Controller) *MockISessionRepository {
	mock := &MockISessionRepository{ctrl: ctrl}
	mock.recorder = &MockISessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepository) EXPECT() *MockISessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteSessionInfo mocks base method.
func (m *MockISessionRepository) DeleteSessionInfo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionInfo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionInfo indicates an expected call of DeleteSessionInfo.
func (mr *MockISessionRepositoryMockRecorder) DeleteSessionInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionInfo", reflect.TypeOf((*MockISessionRepository)(nil).DeleteSessionInfo), ctx)
}

// GetSessionInfo mocks base method.
func (m *MockISessionRepository) GetSessionInfo(ctx context.Context) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionInfo", ctx)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionInfo indicates an expected call of GetSessionInfo.
func (mr *MockISessionRepositoryMockRecorder) GetSessionInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionInfo", reflect.TypeOf((*MockISessionRepository)(nil).GetSessionInfo), ctx)
}

// PutSessionInfo mocks base method.
func (m *MockISessionRepository) PutSessionInfo(ctx context.Context, sessionInfo *entity.UserSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSessionInfo", ctx, sessionInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSessionInfo indicates an expected call of PutSessionInfo.
func (mr *MockISessionRepositoryMockRecorder) PutSessionInfo(ctx, sessionInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSessionInfo", reflect.TypeOf((*MockISessionRepository)(nil).PutSessionInfo), ctx, sessionInfo)
}

// MockITokenService is a mock of ITokenService interface.
type MockITokenService struct {
	ctrl     *gomock.Controller
	recorder *MockITokenServiceMockRecorder
}

// MockITokenServiceMockRecorder is the mock recorder for MockITokenService.
type MockITokenServiceMockRecorder struct {
	mock *MockITokenService
}

// NewMockITokenService creates a new mock instance.
func NewMockITokenService(ctrl *gomock.Controller) *MockITokenService {
	mock := &MockITokenService{ctrl: ctrl}
	mock.recorder = &MockITokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenService) EXPECT() *MockITokenServiceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockITokenService) CreateToken(userID string, ttl time.Duration, privateKey string) (*entity.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID, ttl, privateKey)
	ret0, _ := ret[0].(*entity.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockITokenServiceMockRecorder) CreateToken(userID, ttl, privateKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockITokenService)(nil).CreateToken), userID, ttl, privateKey)
}

// ValidateToken mocks base method.
func (m *MockITokenService) ValidateToken(token, publicKey string) (*entity.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token, publicKey)
	ret0, _ := ret[0].(*entity.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockITokenServiceMockRecorder) ValidateToken(token, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockITokenService)(nil).ValidateToken), token, publicKey)
}
